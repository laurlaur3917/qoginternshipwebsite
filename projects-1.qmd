---
title: "project #1"
execute: 
  warning: false
  message: false
format:
  html:
    page-layout: full
    title-block-banner: true
    code-fold: true 
---

## Reading a basic county-level map into R

Feel free to toggle the code if you want to follow along!

```{r}
library(sf)
library(ggplot2)
library(leaflet)
library(tidyverse)
library(ggthemes)



#us county map
us_data <- st_read("data/US_Counties/US_COUNTIES_ACS_2014.shp", quiet=TRUE)

 ggplot(data = us_data) +
  geom_sf(lwd=0.03) +
  ggthemes::theme_map() +
  labs(title = "County Boundaries")
```

## Making the map interactive and more user friendly (zoomable!):

```{r}
#correct incorrect geometries 

county_map <- st_make_valid(us_data)


#calculate center of map 
centroid <- st_centroid(st_union(county_map))
center_lng <- st_coordinates(centroid)[1, "X"]
center_lat <- st_coordinates(centroid)[1, "Y"]

#make interactive so one can zoom in, centering the map
leaflet(data=county_map) %>% 
  addTiles() %>% 
  addPolygons(weight=0.1) %>% 
  setView(lng=-103.9263, lat= 44.70478, zoom=4)

#note: I had to print(center_lng) and print(center_lat) to get the exact lng and lat used in the setView function. R wouldn't allow me to set lng=center_lng and lat=center_lat for some reason
```

## Trying from another, more complicated source: <https://github.com/generalpiston/geojson-us-city-boundaries>

#### Note: I'm commenting this section out because they are very big files and it ended up not giving me what I wanted, I will try another source below. I mainly just wanted to learn how to read in more complicated file types. If you want to try at home feel free to download the data from the link above.

First, starting with state data:

```{r}
#states_dir<- "data/geojson-us-city-boundaries-master/states"

#takes the main folder states_dir and lists every file ending in .json
#states_files<- list.files(states_dir, pattern= "\\.json$", full.names=TRUE)

#apply a function in R to everything in list, we want to read every single state file: 
#states_list<- lapply(states_files, function(file) st_read(file, quiet = TRUE))

#Create one big spatial data frame 
#states<- do.call(rbind, states_list)

```

Testing if states worked:

```{r}
#ggplot() +
  #geom_sf(data=states)
    
  

```

This took a while and I'm not exactly sure what it is mapping, i found a shape file which is probably more useful

Testing shape files:

```{r}
#Path to shape folder 
#shape_dir<- "data/geojson-us-city-boundaries-master/shapes"

#List all the zip files in the shape folder
#zip_files<- list.files(shape_dir, pattern="\\.zip$", full.names= TRUE)

#set to unzip the folders in the shape folder 
#unzip_dir <- "data/geojson-us-city-boundaries-master/shapes"

#for every zip_file in zip_files list, unzip and save in the shape folder 
#for (zip_file in zip_files) {
  #unzip(zip_file, exdir=unzip_dir)
#}

#take only the files in the shape folder with .shp at the end 
#shp_files <- list.files(unzip_dir, pattern = "\\.shp$", full.names = TRUE)


#shapefiles<- lapply(shp_files, function(file) st_read(file, quiet = TRUE))

#shape<- do.call(rbind, shapefiles)


```

I tried to plot these as well, but It's too big and don't think it's exactly the data we want. Lets try another source.

<https://eric.clst.org/tech/usgeojson/>: adapted from the United States Census Cartographic Boundary Files (2010). Let's try the 5m US County Boundaries.

```{r}
us_data2<- st_read("data/gz_2010_us_050_00_5m.json", quiet=TRUE)

ggplot() +
  geom_sf(data=us_data2, lwd=0.04) +
  coord_sf(xlim=c(-180, -60), ylim=c(20,70)) +
  ggthemes:: theme_map() +
  labs(title = "County Boundaries")

  
 
  
```

This seemed to work better. Let's now make it zoomable again.

```{r}
county_map2 <- st_make_valid(us_data2)


#calculate center of map 
centroid <- st_centroid(st_union(county_map2))
center_lng <- st_coordinates(centroid)[1, "X"]
center_lat <- st_coordinates(centroid)[1, "Y"]

#make interactive so one can zoom in, centering the map
leaflet(data=county_map2) %>% 
  addTiles() %>% 
  addPolygons(weight=0.1) %>% 
  setView(lng=-103.9293, lat= 44.73773, zoom=4)
```

Compressing file with different methods, they all seem to compress to 4.2 MB.

```{r}
library(jsonlite)
#write_json(us_data2, "usdata2_compressed_file.json.gz", compress = "gzip") #4.2 MB
#write_json(us_data2, "usdata2_bzip2.json.bz2", compress = "bzip2") #4.2 MB 
#write_json(us_data2, "usdata2_xz.json.xz", compress = "xz") #4.2 

```
